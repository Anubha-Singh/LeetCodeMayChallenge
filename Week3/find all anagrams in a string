Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


//My Solution

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> freq(26, 0), res;
        int posCount = 0;
        for(const auto c: p)
            if(++freq[c-'a'] == 1) ++posCount;
        
        for(int i = 0, j = 0, size = s.size(), len = p.size(); j < size; ++j) {
            --freq[s[j]-'a'];
            if(freq[s[j]-'a'] == 0) --posCount;
            else if(freq[s[j]-'a'] == -1) ++posCount;
            if(j-i+1 > len) {
                ++freq[s[i]-'a'];
                if(freq[s[i]-'a'] == 1) ++posCount;
                else if(freq[s[i]-'a'] == 0) --posCount;
                ++i;
            }
            if(posCount == 0) res.push_back(i);
        }

        return res;
        
    }
};
